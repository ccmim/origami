function geometricDescriptors=ComputeGeometricDescriptors(mesh)
% Computation of the relevant geometric moments 
% (all up to 2nd order, and 3rd order along the z axis) 
% based on the paper:
% Pozo, J. M., Villa-Uriol, M. C., & Frangi, A. F. (2011). 
% "Efficient 3D Geometric and Zernike moments computation from unstructured surface meshes". 
% IEEE Transactions on Pattern Analysis and Machine Intelligence, 33(3), 471-484.
% From these geometric moments, it computes the geometric descriptors:
% volume, longitudinalSpread, transversalSpread, shear, and skewness.
    center=mean(mesh.vertices);
    ps=(mesh.vertices-center)';
    cells=mesh.faces;
    volumes=sum(...
            ps(:,cells(:,1)).*(ps([2,3,1],cells(:,2)).*ps([3,1,2],cells(:,3))- ...
            ps([2,3,1],cells(:,3)).*ps([3,1,2],cells(:,2))) ...
        )/6;
    nCells=size(cells,1);
    for(i=1:3)
        SS1(1:nCells,i)=1/(2*3)*(...
                                                      ps(i,cells(:,3))   + ...
                                 ps(i,cells(:,2))                        + ...
            ps(i,cells(:,1))                                               ...
        );
        SS2(1:nCells,i)=1/(3*4)*(...
                                                      ps(i,cells(:,3)).^2+ ...
                                 ps(i,cells(:,2))   .*ps(i,cells(:,3))   + ...
                                 ps(i,cells(:,2)).^2                     + ...
            ps(i,cells(:,1))   .*                     ps(i,cells(:,3))   + ...
            ps(i,cells(:,1))   .*ps(i,cells(:,2))                        + ...
            ps(i,cells(:,1)).^2                                            ...
        );
    end
    for(i=1:3)
        j=mod(i,3)+1;
        k=mod(i+1,3)+1;
        SS11(1:nCells,i)=3/2*(SS1(:,j).*SS1(:,k))' + 1/(2*3*4)*squeeze(...
            ps(j,cells(:,1)).*ps(k,cells(:,1)) + ...
            ps(j,cells(:,2)).*ps(k,cells(:,2)) + ...
            ps(j,cells(:,3)).*ps(k,cells(:,3)) ...
        );
    end

    S003=1/(4*5)*(...
                                                      ps(3,cells(:,3)).^3+ ...
                                 ps(3,cells(:,2))   .*ps(3,cells(:,3)).^2+ ...
                                 ps(3,cells(:,2)).^2.*ps(3,cells(:,3))   + ...
                                 ps(3,cells(:,2)).^3                     + ...
            ps(3,cells(:,1))   .*                     ps(3,cells(:,3)).^2+ ...
            ps(3,cells(:,1))   .*ps(3,cells(:,2))   .*ps(3,cells(:,3))   + ...
            ps(3,cells(:,1))   .*ps(3,cells(:,2)).^2                     + ...
            ps(3,cells(:,1)).^2.*                     ps(3,cells(:,3))   + ...
            ps(3,cells(:,1)).^2.*ps(3,cells(:,2))                        + ...
            ps(3,cells(:,1)).^3                                            ...
        );
    volume=sum(volumes);
    %geometricDescriptors.Volume=volume;
    GG1=1/4*6*volumes*SS1;
    GG2=1/5*6*volumes*SS2;
    GG11=1/5*6*volumes*SS11;
    G003=1/6*6*volumes*S003';
% Computation of the second order invariants to rotations around the z-axis:
    GG1normalized=GG1/volume;
    GG2normalized=GG2/volume-GG1normalized.^2;
    GG11normalized=GG11/volume-GG1normalized([2,3,1]).*GG1normalized([3,1,2]);
    geometricDescriptors.LongitudinalSpread=GG2normalized(3)/volume^(2/3);
    geometricDescriptors.TransversalSpread=sqrt(GG2normalized(1)^2+ ...
        GG2normalized(2)^2+2*GG11normalized(3)^2)/volume^(2/3);
    geometricDescriptors.Shear=sqrt(GG11normalized(1)^2+GG11normalized(2)^2)/volume^(2/3);
% Computation of the skewness along the z axis:
    G002normalized=GG2normalized(3);
    G001normalized=GG1normalized(3);
    G003normalized=G003/volume-3*G002normalized*G001normalized-G001normalized^3;
    geometricDescriptors.Skewness=G003normalized/G002normalized^(3/2);
end